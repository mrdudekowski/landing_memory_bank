#!/usr/bin/env node

/**
 * Landing Memory Bank - –°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 */

const fs = require('fs-extra');
const path = require('path');
const chalk = require('chalk');
const ora = require('ora');
const inquirer = require('inquirer');

class LandingMemoryBankInitializer {
  constructor() {
    this.projectRoot = process.cwd();
    this.configPath = path.join(this.projectRoot, 'config.json');
    this.dataPath = path.join(this.projectRoot, 'data');
    this.logsPath = path.join(this.projectRoot, 'logs');
    this.backupsPath = path.join(this.projectRoot, 'backups');
  }

  async init() {
    console.log(chalk.blue.bold('\nüß† Landing Memory Bank - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã\n'));
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      await this.checkDependencies();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
      await this.createDirectoryStructure();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      await this.setupConfiguration();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await this.initializeDatabase();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞
      await this.createStartupScripts();
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      await this.finalCheck();
      
      console.log(chalk.green.bold('\n‚úÖ Landing Memory Bank —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!\n'));
      console.log(chalk.yellow('üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: npm start'));
      console.log(chalk.yellow('üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md'));
      
    } catch (error) {
      console.error(chalk.red.bold('\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:'), error.message);
      process.exit(1);
    }
  }

  async checkDependencies() {
    const spinner = ora('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...').start();
    
    try {
      const packageJsonPath = path.join(this.projectRoot, 'package.json');
      if (!await fs.pathExists(packageJsonPath)) {
        throw new Error('package.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.');
      }
      
      const packageJson = await fs.readJson(packageJsonPath);
      if (!packageJson.dependencies) {
        throw new Error('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ npm install');
      }
      
      spinner.succeed('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
    } catch (error) {
      spinner.fail('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
      throw error;
    }
  }

  async createDirectoryStructure() {
    const spinner = ora('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫...').start();
    
    try {
      const directories = [
        this.dataPath,
        this.logsPath,
        this.backupsPath,
        path.join(this.projectRoot, 'src'),
        path.join(this.projectRoot, 'dist'),
        path.join(this.projectRoot, 'tests')
      ];
      
      for (const dir of directories) {
        await fs.ensureDir(dir);
      }
      
      spinner.succeed('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error) {
      spinner.fail('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫');
      throw error;
    }
  }

  async setupConfiguration() {
    const spinner = ora('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...').start();
    
    try {
      if (!await fs.pathExists(this.configPath)) {
        const configExamplePath = path.join(this.projectRoot, 'config.example.json');
        
        if (await fs.pathExists(configExamplePath)) {
          await fs.copy(configExamplePath, this.configPath);
          spinner.succeed('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞');
        } else {
          // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
          const basicConfig = {
            project: {
              name: "Landing Memory Bank Project",
              type: "landing-page",
              complexity: "medium"
            },
            system: {
              autoMode: true,
              memoryBankSize: "1GB"
            }
          };
          
          await fs.writeJson(this.configPath, basicConfig, { spaces: 2 });
          spinner.succeed('–ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');
        }
      } else {
        spinner.succeed('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
    } catch (error) {
      spinner.fail('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      throw error;
    }
  }

  async initializeDatabase() {
    const spinner = ora('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...').start();
    
    try {
      const dbPath = path.join(this.dataPath, 'memory-bank.db');
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const dbStructure = {
        version: '1.0.0',
        created: new Date().toISOString(),
        tables: ['knowledge', 'projects', 'modes', 'rules'],
        status: 'initialized'
      };
      
      await fs.writeJson(path.join(this.dataPath, 'db-structure.json'), dbStructure, { spaces: 2 });
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .gitkeep –¥–ª—è –ø–∞–ø–∫–∏ data
      await fs.writeFile(path.join(this.dataPath, '.gitkeep'), '');
      
      spinner.succeed('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      spinner.fail('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      throw error;
    }
  }

  async createStartupScripts() {
    const spinner = ora('–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞...').start();
    
    try {
      // –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞
      const mainScript = `#!/usr/bin/env node

const { LandingMemoryBank } = require('../dist/index.js');

async function main() {
  try {
    const memoryBank = new LandingMemoryBank();
    await memoryBank.activate();
    
    console.log('üß† Landing Memory Bank –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
    process.exit(1);
  }
}

main();
`;
      
      await fs.writeFile(path.join(this.projectRoot, 'scripts/start.js'), mainScript);
      
      // –°–∫—Ä–∏–ø—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      const devScript = `#!/usr/bin/env node

const { LandingMemoryBank } = require('../dist/index.js');

async function dev() {
  try {
    const memoryBank = new LandingMemoryBank({
      development: true,
      watchMode: true
    });
    
    await memoryBank.activate();
    console.log('üß† Landing Memory Bank –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
    process.exit(1);
  }
}

dev();
`;
      
      await fs.writeFile(path.join(this.projectRoot, 'scripts/dev.js'), devScript);
      
      // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
      await fs.chmod(path.join(this.projectRoot, 'scripts/start.js'), 0o755);
      await fs.chmod(path.join(this.projectRoot, 'scripts/dev.js'), 0o755);
      
      spinner.succeed('–°–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error) {
      spinner.fail('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞');
      throw error;
    }
  }

  async finalCheck() {
    const spinner = ora('–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...').start();
    
    try {
      const requiredFiles = [
        'package.json',
        'config.json',
        'README.md'
      ];
      
      const requiredDirs = [
        'data',
        'logs',
        'backups',
        'scripts'
      ];
      
      for (const file of requiredFiles) {
        if (!await fs.pathExists(path.join(this.projectRoot, file))) {
          throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: ${file}`);
        }
      }
      
      for (const dir of requiredDirs) {
        if (!await fs.pathExists(path.join(this.projectRoot, dir))) {
          throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞: ${dir}`);
        }
      }
      
      spinner.succeed('–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞');
    } catch (error) {
      spinner.fail('–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
      throw error;
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if (require.main === module) {
  const initializer = new LandingMemoryBankInitializer();
  initializer.init().catch(console.error);
}

module.exports = LandingMemoryBankInitializer;
